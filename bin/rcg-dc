#!/bin/bash
## Helper script for managing the rustc_codegen_gcc for Sega Dreamcast

source "$(dirname "$0")/common.sh"

patch_rcg()
{
    pushd $CG_GCCJIT_DIR > /dev/null
    if [ -e "rcg_dc_patched.stamp" ]; then
        echo "rustc_codegen_gcc has already been patched!"
        exit 1
    fi
    patch_failed=0
    for diff in ../patches/rcg/*.diff; do
        patch -p1 < "$diff"
        if [ $? -eq 1 ]; then
            patch_failed=1
        fi
    done
    if [ $patch_failed -eq 0 ]; then
        touch rcg_dc_patched.stamp
    fi
    popd > /dev/null
}

clean()
{
    pushd $CG_GCCJIT_DIR  > /dev/null
    ./y.sh clean all
    popd > /dev/null
}

prepare()
{
    pushd $CG_GCCJIT_DIR > /dev/null
    ./y.sh prepare --cross
    popd > /dev/null
}

build()
{
    pushd $CG_GCCJIT_DIR > /dev/null
    ./y.sh build --sysroot --release --features master --target-triple sh-elf --target $CG_GCCJIT_DIR/../misc/sh-elf.json
    popd > /dev/null
}

use()
{
    echo "Use rcg-dc with one of the following commands:"
    echo "  patch -- patch a newly cloned rustc_codegen_gcc repo with Dreamcast patches"
    echo "  clean -- clean the built rustc_codegen_gcc"
    echo "  prepare -- prepare to build rustc_codegen_gcc for cross-compilation use"
    echo "  build -- build the rustc_codegen_gcc installation"
    echo "  rebuild -- clean, prepare, and build the rustc_codegen_gcc installation"
}

case "$1" in
    "patch" )
        patch_rcg
        ;;
    "clean" )
        clean
        ;;
    "prepare" )
        prepare
        ;;
    "build" )
        build
        ;;
    "rebuild" )
        clean
        prepare
        build
        ;;
    * )
        use
        ;;
esac
